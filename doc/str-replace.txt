str_replace

(PHP 4, PHP 5)

str_replace â€” Replace all occurrences of the search string with the
replacement string

==============================================================================
*Description*

    mixed str_replace ( mixed $search , mixed $replace , mixed $subject [,~
    int &$count ] )~

This function returns a string or an array with all occurrences of {search} in
{subject} replaced with the given {replace} value.

If you don't need fancy replacing rules (like regular expressions), you should
always use this function instead of |preg_replace|.

==============================================================================
*Parameters*

If {search} and {replace} are arrays, then str_replace() takes a value from
each array and uses them to search and replace on {subject}. If {replace} has
fewer values than {search}, then an empty string is used for the rest of
replacement values. If {search} is an array and {replace} is a string, then
this replacement string is used for every value of {search}. The converse
would not make sense, though.

If {search} or {replace} are arrays, their elements are processed first to
last.

{search}

    The value being searched for, otherwise known as the needle. An array may
    be used to designate multiple needles.

{replace}

    The replacement value that replaces found {search} values. An array may be
    used to designate multiple replacements.

{subject}

    The string or array being searched and replaced on, otherwise known as the
    haystack.

    If {subject} is an array, then the search and replace is performed with
    every entry of {subject}, and the return value is an array as well.

{count}

    If passed, this will be set to the number of replacements performed.

==============================================================================
*Return* *Values*

This function returns a string or an array with the replaced values.

==============================================================================
*Examples*

Example #1 Basic str_replace() examples

<?php >
    // Provides: <body text='black'>
    $bodytag = str_replace("%body%", "black", "<body text='%body%'>");

    // Provides: Hll Wrld f PHP
    $vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
    $onlyconsonants = str_replace($vowels, "", "Hello World of PHP");

    // Provides: You should eat pizza, beer, and ice cream every day
    $phrase  = "You should eat fruits, vegetables, and fiber every day.";
    $healthy = array("fruits", "vegetables", "fiber");
    $yummy   = array("pizza", "beer", "ice cream");

    $newphrase = str_replace($healthy, $yummy, $phrase);

    // Provides: 2
    $str = str_replace("ll", "", "good golly miss molly!", $count);
    echo $count;
<?>

Example #2 Examples of potential str_replace() gotchas

<?php >
    // Order of replacement
    $str     = "Line 1\nLine 2\rLine 3\r\nLine 4\n";
    $order   = array("\r\n", "\n", "\r");
    $replace = '<br />';

    // Processes \r\n's first so they aren't converted twice.
    $newstr = str_replace($order, $replace, $str);

    //
     Outputs F because A is replaced with B, then B is replaced with C, and so on...
    // Finally E is replaced with F, because of left to right replacements.
    $search  = array('A', 'B', 'C', 'D', 'E');
    $replace = array('B', 'C', 'D', 'E', 'F');
    $subject = 'A';
    echo str_replace($search, $replace, $subject);

    // Outputs: apearpearle pear
    // For the same reason mentioned above
    $letters = array('a', 'p');
    $fruit   = array('apple', 'pear');
    $text    = 'a p';
    $output  = str_replace($letters, $fruit, $text);
    echo $output;
<?>

==============================================================================
*Notes*

    Note: This function is binary-safe.

Caution

Replacement order gotcha

Because str_replace() replaces left to right, it might replace a previously
inserted value when doing multiple replacements. See also the examples in this
document.

    Note:

    This function is case-sensitive. Use |str_ireplace| for case-insensitive
    replace.

==============================================================================
*See* *Also*

  * |str_ireplace| - Case-insensitive version of str_replace.
  * |substr_replace| - Replace text within a portion of a string
  * |preg_replace| - Perform a regular expression search and replace
  * |strtr| - Translate characters or replace substrings


vim:ft=help: