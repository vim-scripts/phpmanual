array_merge

(PHP 4, PHP 5)

array_merge â€” Merge one or more arrays

==============================================================================
*Description*

    array array_merge ( array $array1 [, array $... ] )~

Merges the elements of one or more arrays together so that the values of one
are appended to the end of the previous one. It returns the resulting array.

If the input arrays have the same string keys, then the later value for that
key will overwrite the previous one. If, however, the arrays contain numeric
keys, the later value will not overwrite the original value, but will be
appended.

Values in the input array with numeric keys will be renumbered with
incrementing keys starting from zero in the result array.

==============================================================================
*Parameters*

{array1}

    Initial array to merge.

{...}

    Variable list of arrays to merge.

==============================================================================
*Return* *Values*

Returns the resulting array.

==============================================================================
*Examples*

Example #1 array_merge() example

<?php >
    $array1 = array("color" => "red", 2, 4);
    $array2 = array("a", "b", "color" => "green", "shape" => "trapezoid", 4);
    $result = array_merge($array1, $array2);
    print_r($result);
<?>

The above example will output:

Array
(
    [color] => green
    [0] => 2
    [1] => 4
    [2] => a
    [3] => b
    [shape] => trapezoid
    [4] => 4
)

Example #2 Simple array_merge() example

<?php >
    $array1 = array();
    $array2 = array(1 => "data");
    $result = array_merge($array1, $array2);
<?>

Don't forget that numeric keys will be renumbered!

Array
(
    [0] => data
)

If you want to append array elements from the second array to the first array
while not overwriting the elements from the first array and not re-indexing,
use the + array union operator:

<?php >
    $array1 = array(0 => 'zero_a', 2 => 'two_a', 3 => 'three_a');
    $array2 = array(1 => 'one_b', 3 => 'three_b', 4 => 'four_b');
    $result = $array1 + $array2;
    var_dump($result);
<?>

The keys from the first array will be preserved. If an array key exists in
both arrays, then the element from the first array will be used and the
matching key's element from the second array will be ignored.

array(5) {
  [0]=>
  string(6) "zero_a"
  [2]=>
  string(5) "two_a"
  [3]=>
  string(7) "three_a"
  [1]=>
  string(5) "one_b"
  [4]=>
  string(6) "four_b"
}

Example #3 array_merge() with non-array types

<?php >
    $beginning = 'foo';
    $end = array(1 => 'bar');
    $result = array_merge((array)$beginning, (array)$end);
    print_r($result);
<?>

The above example will output:

    Array
    (
        [0] => foo
        [1] => bar
    )

==============================================================================
*See* *Also*

  * |array_merge_recursive| - Merge two or more arrays recursively
  * |array_replace| - Replaces elements from passed arrays into the first
    array
  * |array_combine| - Creates an array by using one array for keys and another
    for its values
  * array operators


vim:ft=help: