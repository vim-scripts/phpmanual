sqlite_column

SQLiteResult::column

SQLiteUnbuffered::column

(PHP 5 < 5.4.0, PECL sqlite >= 1.0.0)

sqlite_column -- SQLiteResult::column -- SQLiteUnbuffered::column â€” Fetches a
column from the current row of a result set

==============================================================================
*Description*

    mixed sqlite_column ( resource $result , mixed $index_or_name [, bool~
    $decode_binary = true ] )~
    mixed SQLiteResult::column ( mixed $index_or_name [, bool $decode_binary~
    = true ] )~
    mixed SQLiteUnbuffered::column ( mixed $index_or_name [, bool~
    $decode_binary = true ] )~

Fetches the value of a column named {index_or_name} (if it is a string), or of
the ordinal column numbered {index_or_name} (if it is an integer) from the
current row of the query result handle {result}.

==============================================================================
*Parameters*

{result}

    The SQLite result resource. This parameter is not required when using the
    object-oriented method.

{index_or_name}

    The column index or name to fetch.

{decode_binary}

    When the {decode_binary} parameter is set to TRUE (the default), PHP will
    decode the binary encoding it applied to the data if it was encoded using
    the |sqlite_escape_string|. You should normally leave this value at its
    default, unless you are interoperating with databases created by other
    sqlite capable applications.

==============================================================================
*Return* *Values*

Returns the column value.

==============================================================================
*Notes*

    Note:

    Use this function when you are iterating a large result set with many
    columns, or with columns that contain large amounts of data.

==============================================================================
*See* *Also*

  * |sqlite_fetch_string| - Alias of sqlite_fetch_single


vim:ft=help: