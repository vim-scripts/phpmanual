cubrid_fetch

(PECL CUBRID >= 8.3.0)

cubrid_fetch â€” Fetch the next row from a result set

==============================================================================
*Description*

    mixed cubrid_fetch ( resource $result [, int $type = CUBRID_BOTH ] )~

The cubrid_fetch() function is used to get a single row from the query result.
The cursor automatically moves to the next row after getting the result.

==============================================================================
*Parameters*

{result}

    {result} comes from a call to |cubrid_execute|

{type}

    Array type of the fetched result CUBRID_NUM, CUBRID_ASSOC, CUBRID_BOTH,
    CUBRID_OBJECT. If you want to operate the lob object, you can use
    CUBRID_LOB.

==============================================================================
*Return* *Values*

Result array or object, when process is successful.

FALSE, when there are no more rows; NULL, when process is unsuccessful.

The result can be received either as an array or as an object, and you can
decide which data type to use by setting the {type} argument. The {type}
variable can be set to one of the following values:

  * CUBRID_NUM : Numerical array (0-based)
  * CUBRID_ASSOC : Associative array
  * CUBRID_BOTH : Numerical & Associative array (default)
  * CUBRID_OBJECT : object that has the attribute name as the column name of
    query result

When {type} argument is omitted, the result will be received using CUBRID_BOTH
option as default. When you want to receive query result in object data type,
the column name of the result must obey the naming rules for identifiers in
PHP. For example, column name such as "count(*)" cannot be received in object
type.

==============================================================================
*Examples*

Example #1 cubrid_fetch() example

<?php >
    $conn = cubrid_connect("localhost", 33000, "demodb");
    $req = cubrid_execute($conn, "SELECT * FROM stadium WHERE nation_code=
    'GRE' AND seats > 10000");

    printf("%-40s %-10s %-6s %-20s\n", "name", "area", "seats", "address");
    while ($row = cubrid_fetch($req)) {
        printf("%-40s %-10s %-6s %-20s\n", 
            $row["name"], $row["area"], $row["seats"], $row["address"]);
    }

    // if you want to operate lob object, you can use cubrid_fetch
    ($req, CUBRID_LOB)

    cubrid_close_request($req);

    cubrid_disconnect($conn);
<?>

The above example will output:

name                                     area       seats  address
Panathinaiko Stadium                     86300.00   50000  Athens, Greece
Olympic Stadium                          54700.00   13000  Athens, Greece
Olympic Indoor Hall                      34100.00   18800  Athens, Greece
Olympic Hall                             52400.00   21000  Athens, Greece
Olympic Aquatic Centre                   42500.00   11500  Athens, Greece
Markopoulo Olympic Equestrian Centre     64000.00   15000  Markopoulo, Athens, Greece
Faliro Coastal Zone Olympic Complex      34650.00   12171  Faliro, Athens, Greece
Athens Olympic Stadium                   120400.00  71030  Maroussi, Athens, Greece
Ano Liossia                              34000.00   12000  Ano Liosia, Athens, Greece

==============================================================================
*See* *Also*

  * |cubrid_execute| - Execute a prepared SQL statement
  * |cubrid_fetch_array| - Fetch a result row as an associative array, a
    numeric array, or both
  * |cubrid_fetch_row| - Return a numerical array with the values of the
    current row
  * |cubrid_fetch_assoc| - Return the associative array that corresponds to
    the fetched row
  * |cubrid_fetch_object| - Fetche the next row and returns it as an object


vim:ft=help: