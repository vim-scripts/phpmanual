array_search

(PHP 4 >= 4.0.5, PHP 5)

array_search â€” Searches the array for a given value and returns the
corresponding key if successful

==============================================================================
*Description*

    mixed array_search ( mixed $needle , array $haystack [, bool $strict =~
    false ] )~

Searches {haystack} for {needle}.

==============================================================================
*Parameters*

{needle}

    The searched value.

        Note:

        If {needle} is a string, the comparison is done in a case-sensitive
        manner.

{haystack}

    The array.

{strict}

    If the third parameter {strict} is set to TRUE then the array_search()
    function will search for identical elements in the {haystack}. This means
    it will also check the types of the {needle} in the {haystack}, and
    objects must be the same instance.

==============================================================================
*Return* *Values*

Returns the key for {needle} if it is found in the array, FALSE otherwise.

If {needle} is found in {haystack} more than once, the first matching key is
returned. To return the keys for all matching values, use |array_keys| with
the optional {search_value} parameter instead.

Warning

This function may return Boolean FALSE, but may also return a non-Boolean
value which evaluates to FALSE. Please read the section on Booleans for more
information. Use the === operator for testing the return value of this
function.

==============================================================================
*Changelog*

Version                              Description
5.3.0   As with all internal PHP functions as of 5.3.0, array_search() returns
        NULL if invalid parameters are passed to it.
4.2.0   Prior to PHP 4.2.0, array_search() returns NULL on failure instead of
        FALSE.

==============================================================================
*Examples*

Example #1 array_search() example

<?php >
    $array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');

    $key = array_search('green', $array); // $key = 2;
    $key = array_search('red', $array);   // $key = 1;
<?>

==============================================================================
*See* *Also*

  * |array_keys| - Return all the keys or a subset of the keys of an array
  * |array_values| - Return all the values of an array
  * |array_key_exists| - Checks if the given key or index exists in the array
  * |in_array| - Checks if a value exists in an array


vim:ft=help: