array_intersect_key

(PHP 5 >= 5.1.0)

array_intersect_key â€” Computes the intersection of arrays using keys for
comparison

==============================================================================
*Description*

    array array_intersect_key ( array $array1 , array $array2 [, array $... ]~
)~

array_intersect_key() returns an array containing all the entries of {array1}
which have keys that are present in all the arguments.

==============================================================================
*Parameters*

{array1}

    The array with master keys to check.

{array2}

    An array to compare keys against.

{...}

    A variable list of arrays to compare.

==============================================================================
*Return* *Values*

Returns an associative array containing all the entries of {array1} which have
keys that are present in all arguments.

==============================================================================
*Examples*

Example #1 array_intersect_key() example

<?php >
    $array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
    $array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);

    var_dump(array_intersect_key($array1, $array2));
<?>

The above example will output:

array(2) {
  ["blue"]=>
  int(1)
  ["green"]=>
  int(3)
}

In our example you see that only the keys 'blue' and 'green' are present in
both arrays and thus returned. Also notice that the values for the keys 'blue'
and 'green' differ between the two arrays. A match still occurs because only
the keys are checked. The values returned are those of {array1}.

The two keys from the key => value pairs are considered equal only if (string)
$key1 === (string) $key2 . In other words a strict type check is executed so
the string representation must be the same.

==============================================================================
*See* *Also*

  * |array_diff| - Computes the difference of arrays
  * |array_udiff| - Computes the difference of arrays by using a callback
    function for data comparison
  * |array_diff_assoc| - Computes the difference of arrays with additional
    index check
  * |array_diff_uassoc| - Computes the difference of arrays with additional
    index check which is performed by a user supplied callback function
  * |array_udiff_assoc| - Computes the difference of arrays with additional
    index check, compares data by a callback function
  * |array_udiff_uassoc| - Computes the difference of arrays with additional
    index check, compares data and indexes by a callback function
  * |array_diff_key| - Computes the difference of arrays using keys for
    comparison
  * |array_diff_ukey| - Computes the difference of arrays using a callback
    function on the keys for comparison
  * |array_intersect| - Computes the intersection of arrays
  * |array_intersect_assoc| - Computes the intersection of arrays with
    additional index check
  * |array_intersect_uassoc| - Computes the intersection of arrays with
    additional index check, compares indexes by a callback function
  * |array_intersect_ukey| - Computes the intersection of arrays using a
    callback function on the keys for comparison


vim:ft=help: