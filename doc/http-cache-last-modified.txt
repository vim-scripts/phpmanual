http_cache_last_modified

(PECL pecl_http >= 0.1.0)

http_cache_last_modified â€” Caching by last modification

==============================================================================
*Description*

    bool http_cache_last_modified ([ int $timestamp_or_expires ] )~

Attempts to cache the sent entity by its last modification date.

If the supplied argument is greater than 0, it is handled as timestamp and
will be sent as date of last modification. If it is 0 or omitted, the current
time will be sent as Last-Modified date. If it's negative, it is handled as
expiration time in seconds, which means that if the requested last
modification date is not between the calculated timespan, the Last-Modified
header is updated and the actual body will be sent.

A log entry will be written to the cache log if the INI setting http.log.cache
is set and the cache attempt was successful.

    Note: This function may be used in conjunction with |http_send_data|, 
    |http_send_file| and |http_send_stream|.

==============================================================================
*Parameters*

{timestamp_or_expires}

    Unix timestamp

==============================================================================
*Return* *Values*

Returns FALSE or exits on success with 304 Not Modified if the entity is
cached. See the INI setting http.force_exit for what "exits" means.

==============================================================================
*Examples*

Example #1 A http_cache_last_modified() example

Caching for 5 seconds.

<?php >
    http_cache_last_modified(-5);
    printf("%s\n", http_date());
<?>

==============================================================================
*See* *Also*

  * |http_cache_etag| - Caching by ETag
  * the  HttpResponse class if you are using PHP 5.1.0 and above


vim:ft=help: