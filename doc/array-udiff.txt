array_udiff

(PHP 5)

array_udiff â€” Computes the difference of arrays by using a callback function
for data comparison

==============================================================================
*Description*

    array array_udiff ( array $array1 , array $array2 [, array $... ],~
    callable $value_compare_func )~

Computes the difference of arrays by using a callback function for data
comparison. This is unlike |array_diff| which uses an internal function for
comparing the data.

==============================================================================
*Parameters*

{array1}

    The first array.

{array2}

    The second array.

{value_compare_func}

    The callback comparison function.

    The comparison function must return an integer less than, equal to, or
    greater than zero if the first argument is considered to be respectively
    less than, equal to, or greater than the second.


    int callback ( mixed $a, mixed $b )~

==============================================================================
*Return* *Values*

Returns an array containing all the values of {array1} that are not present in
any of the other arguments.

==============================================================================
*Examples*

Example #1 array_udiff() example using stdClass Objects

<?php >
    // Arrays to compare
    $array1 = array(new stdclass, new stdclass,
                    new stdclass, new stdclass,
                   );

    $array2 = array(
                    new stdclass, new stdclass,
                   );

    // Set some properties for each object
    $array1[0]->width = 11; $array1[0]->height = 3;
    $array1[1]->width = 7;  $array1[1]->height = 1;
    $array1[2]->width = 2;  $array1[2]->height = 9;
    $array1[3]->width = 5;  $array1[3]->height = 7;

    $array2[0]->width = 7;  $array2[0]->height = 5;
    $array2[1]->width = 9;  $array2[1]->height = 2;

    function compare_by_area($a, $b) {
        $areaA = $a->width * $a->height;
        $areaB = $b->width * $b->height;
        
        if ($areaA < $areaB) {
            return -1;
        } elseif ($areaA > $areaB) {
            return 1;
        } else {
            return 0;
        }
    }

    print_r(array_udiff($array1, $array2, 'compare_by_area'));
<?>

The above example will output:

Array
(
    [0] => stdClass Object
        (
            [width] => 11
            [height] => 3
        )

    [1] => stdClass Object
        (
            [width] => 7
            [height] => 1
        )

)

Example #2 array_udiff() example using DateTime Objects

<?php >
    Class MyCalendar {
        public $free = array();
        public $booked = array();

        public function __construct($week = 'now') {
            $start = new DateTime($week);
            $start->modify('Monday this week midnight');
            $end = clone $start;
            $end->modify('Friday this week midnight');
            $interval = new DateInterval('P1D');
            foreach (new DatePeriod($start, $interval, $end) as $freeTime) {
                $this->free[] = $freeTime;
            }
        }

        public function bookAppointment(DateTime $date, $note) {
            $this->booked[] = array('date' => $date->modify('midnight'), 'note' =>
     $note);
        }

        public function checkAvailability() {
            return array_udiff($this->free, $this->booked, array($this, 
    'customCompare'));
        }
        
        public function customCompare($free, $booked) {
            if (is_array($free)) $a = $free['date'];
            else $a = $free;
            if (is_array($booked)) $b = $booked['date'];
            else $b = $booked;
            if ($a == $b) {
                return 0;
            } elseif ($a > $b) {
                return 1;
            } else {
                return -1;
            }
        }
    }

    // Create a calendar for weekly appointments
    $myCalendar = new MyCalendar;

    // Book some appointments for this week
    $myCalendar->bookAppointment(new DateTime('Monday this week'), 
    "Cleaning GoogleGuy's apartment.");
    $myCalendar->bookAppointment(new DateTime('Wednesday this week'), 
    "Going on a snowboarding trip.");
    $myCalendar->bookAppointment(new DateTime('Friday this week'), 
    "Fixing buggy code.");

    // Check availability of days by comparing $booked dates against $free dates
    echo "I'm available on the following days this week...\n\n";
    foreach ($myCalendar->checkAvailability() as $free) {
        echo $free->format('l'), "\n"; 
    }
    echo "\n\n";
    echo "I'm busy on the following days this week...\n\n";
    foreach ($myCalendar->booked as $booked) {
        echo $booked['date']->format('l'), ": ", $booked['note'], "\n"; 
    }
<?>

The above example will output:

I'm available on the following days this week...

Tuesday
Thursday


I'm busy on the following days this week...

Monday: Cleaning GoogleGuy's apartment.
Wednesday: Going on a snowboarding trip.
Friday: Fixing buggy code.

==============================================================================
*Notes*

    Note: Please note that this function only checks one dimension of a
    n-dimensional array. Of course you can check deeper dimensions by using
    array_udiff($array1[0], $array2[0], "data_compare_func");.

==============================================================================
*See* *Also*

  * |array_diff| - Computes the difference of arrays
  * |array_diff_assoc| - Computes the difference of arrays with additional
    index check
  * |array_diff_uassoc| - Computes the difference of arrays with additional
    index check which is performed by a user supplied callback function
  * |array_udiff_assoc| - Computes the difference of arrays with additional
    index check, compares data by a callback function
  * |array_udiff_uassoc| - Computes the difference of arrays with additional
    index check, compares data and indexes by a callback function
  * |array_intersect| - Computes the intersection of arrays
  * |array_intersect_assoc| - Computes the intersection of arrays with
    additional index check
  * |array_uintersect| - Computes the intersection of arrays, compares data by
    a callback function
  * |array_uintersect_assoc| - Computes the intersection of arrays with
    additional index check, compares data by a callback function
  * |array_uintersect_uassoc| - Computes the intersection of arrays with
    additional index check, compares data and indexes by a callback functions


vim:ft=help: