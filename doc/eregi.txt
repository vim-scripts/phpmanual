eregi

(PHP 4, PHP 5)

eregi â€” Case insensitive regular expression match

==============================================================================
*Description*

    int eregi ( string $pattern , string $string [, array &$regs ] )~

This function is identical to |ereg| except that it ignores case distinction
when matching alphabetic characters.

Warning

This function has been DEPRECATED as of PHP 5.3.0. Relying on this feature is
highly discouraged.

==============================================================================
*Parameters*

{pattern}

    Case insensitive regular expression.

{string}

    The input string.

{regs}

    If matches are found for parenthesized substrings of {pattern} and the
    function is called with the third argument {regs}, the matches will be
    stored in the elements of the array {regs}.

    $regs[1] will contain the substring which starts at the first left
    parenthesis; $regs[2] will contain the substring starting at the second,
    and so on. $regs[0] will contain a copy of the complete string matched.

==============================================================================
*Return* *Values*

Returns the length of the matched string if a match for {pattern} was found in
{string}, or FALSE if no matches were found or an error occurred.

If the optional parameter {regs} was not passed or the length of the matched
string is 0, this function returns 1.

==============================================================================
*Examples*

Example #1 eregi() example

<?php >
    $string = 'XYZ';
    if (eregi('z', $string)) {
        echo "'$string' contains a 'z' or 'Z'!";
    }
<?>

==============================================================================
*Notes*

    Note:

    As of PHP 5.3.0, the regex extension is deprecated in favor of the PCRE
    extension. Calling this function will issue an E_DEPRECATED notice. See
    the list of differences for help on converting to PCRE.

Tip

eregi() is deprecated as of PHP 5.3.0. |preg_match| with the i (PCRE_CASELESS)
modifier is the suggested alternative.

==============================================================================
*See* *Also*

  * |ereg| - Regular expression match
  * |ereg_replace| - Replace regular expression
  * |eregi_replace| - Replace regular expression case insensitive
  * |preg_match| - Perform a regular expression match
  * |stripos| - Find the position of the first occurrence of a
    case-insensitive substring in a string
  * |stristr| - Case-insensitive strstr
  * |quotemeta| - Quote meta characters


vim:ft=help: