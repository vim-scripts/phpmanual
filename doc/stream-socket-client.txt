stream_socket_client

(PHP 5)

stream_socket_client — Open Internet or Unix domain socket connection

==============================================================================
*Description*

    resource stream_socket_client ( string $remote_socket [, int &$errno [,~
    string &$errstr [, float $timeout =~
    ini_get("default_socket_timeout") [, int $flags =~
    STREAM_CLIENT_CONNECT [, resource $context ]]]]] )~

Initiates a stream or datagram connection to the destination specified by
{remote_socket}. The type of socket created is determined by the transport
specified using standard URL formatting: transport://target. For Internet
Domain sockets (AF_INET) such as TCP and UDP, the target portion of the
{remote_socket} parameter should consist of a hostname or IP address followed
by a colon and a port number. For Unix domain sockets, the {target} portion
should point to the socket file on the filesystem.

    Note:

    The stream will by default be opened in blocking mode. You can switch it
    to non-blocking mode by using |stream_set_blocking|.

==============================================================================
*Parameters*

{remote_socket}

    Address to the socket to connect to.

{errno}

    Will be set to the system level error number if connection fails.

{errstr}

    Will be set to the system level error message if the connection fails.

{timeout}

    Number of seconds until the connect() system call should timeout.


        Note: This parameter only applies when not making asynchronous
        connection attempts.

        Note:

        To set a timeout for reading/writing data over the socket, use the 
        |stream_set_timeout|, as the {timeout} only applies while making
        connecting the socket.

{flags}

    Bitmask field which may be set to any combination of connection flags.
    Currently the select of connection flags is limited to
    STREAM_CLIENT_CONNECT (default), STREAM_CLIENT_ASYNC_CONNECT and
    STREAM_CLIENT_PERSISTENT.

{context}

    A valid context resource created with |stream_context_create|.

==============================================================================
*Return* *Values*

On success a stream resource is returned which may be used together with the
other file functions (such as |fgets|, |fgetss|, |fwrite|, |fclose|, and |feof
|), FALSE on failure.

==============================================================================
*Errors/Exceptions*

On failure the {errno} and {errstr} arguments will be populated with the
actual system level error that occurred in the system-level connect() call. If
the value returned in {errno} is 0 and the function returned FALSE, it is an
indication that the error occurred before the connect() call. This is most
likely due to a problem initializing the socket. Note that the {errno} and
{errstr} arguments will always be passed by reference.

==============================================================================
*Examples*

Example #1 stream_socket_client() example

<?php >
    $fp = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
    if (!$fp) {
        echo "$errstr ($errno)<br />\n";
    } else {
        fwrite($fp, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept: */*\r\n\r\
    n");
        while (!feof($fp)) {
            echo fgets($fp, 1024);
        }
        fclose($fp);
    }
<?>

Example #2 Using UDP connection

Retrieving the day and time from the UDP service "daytime" (port 13) on
localhost.

<?php >
    $fp = stream_socket_client("udp://127.0.0.1:13", $errno, $errstr);
    if (!$fp) {
        echo "ERROR: $errno - $errstr<br />\n";
    } else {
        fwrite($fp, "\n");
        echo fread($fp, 26);
        fclose($fp);
    }
<?>

==============================================================================
*Notes*

Warning

UDP sockets will sometimes appear to have opened without an error, even if the
remote host is unreachable. The error will only become apparent when you read
or write data to/from the socket. The reason for this is because UDP is a
"connectionless" protocol, which means that the operating system does not try
to establish a link for the socket until it actually needs to send or receive
data.

    Note: When specifying a numerical IPv6 address (e.g. fe80::1), you must
    enclose the IP in square brackets—for example, tcp://[fe80::1]:80.

    Note:

    Depending on the environment, the Unix domain or the optional connect
    timeout may not be available. A list of available transports can be
    retrieved using |stream_get_transports|. See List of Supported Socket
    Transports for a list of built in transports.

==============================================================================
*See* *Also*

  * |stream_socket_server| - Create an Internet or Unix domain server socket
  * |stream_set_blocking| - Set blocking/non-blocking mode on a stream
  * |stream_set_timeout| - Set timeout period on a stream
  * |stream_select| - Runs the equivalent of the select() system call on the
    given arrays of streams with a timeout specified by tv_sec and tv_usec
  * |fgets| - Gets line from file pointer
  * |fgetss| - Gets line from file pointer and strip HTML tags
  * |fwrite| - Binary-safe file write
  * |fclose| - Closes an open file pointer
  * |feof| - Tests for end-of-file on a file pointer
  * cURL Functions


vim:ft=help: