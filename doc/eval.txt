eval

(PHP 4, PHP 5)

eval â€” Evaluate a string as PHP code

==============================================================================
*Description*

    mixed eval ( string $code )~

Evaluates the given {code} as PHP.

Caution

The eval() language construct is very dangerous because it allows execution of
arbitrary PHP code. Its use thus is discouraged. If you have carefully
verified that there is no other option than to use this construct, pay special
attention not to pass any user provided data into it without properly
validating it beforehand.

==============================================================================
*Parameters*

{code}

    Valid PHP code to be evaluated.

    The code mustn't be wrapped in opening and closing PHP tags, i.e. 'echo
    "Hi!";' must be passed instead of '<? echo "Hi!"; >'. It is still possible
    to leave and reenter PHP mode though using the appropriate PHP tags, e.g.
    'echo "In PHP mode!"; ?>In HTML mode!<? echo "Back in PHP mode!";'.

    Apart from that the passed code must be valid PHP. This includes that all
    statements must be properly terminated using a semicolon. 'echo "Hi!"' for
    example will cause a parse error, whereas 'echo "Hi!";' will work.

    A return statement will immediately terminate the evaluation of the code.

    The code will be executed in the scope of the code calling eval(). Thus
    any variables defined or changed in the eval() call will remain visible
    after it terminates.

==============================================================================
*Return* *Values*

eval() returns NULL unless return is called in the evaluated code, in which
case the value passed to return is returned. If there is a parse error in the
evaluated code, eval() returns FALSE and execution of the following code
continues normally. It is not possible to catch a parse error in eval() using 
|set_error_handler|.

==============================================================================
*Examples*

Example #1 eval() example - simple text merge

<?php >
    $string = 'cup';
    $name = 'coffee';
    $str = 'This is a $string with my $name in it.';
    echo $str. "\n";
    eval("\$str = \"$str\";");
    echo $str. "\n";
<?>

The above example will output:

This is a $string with my $name in it.
This is a cup with my coffee in it.

==============================================================================
*Notes*

    Note: Because this is a language construct and not a function, it cannot
    be called using variable functions.

Tip

As with anything that outputs its result directly to the browser, the
output-control functions can be used to capture the output of this function,
and save it in a string (for example).

    Note:

    In case of a fatal error in the evaluated code, the whole script exits.

==============================================================================
*See* *Also*

  * |call_user_func| - Call the callback given by the first parameter


vim:ft=help: