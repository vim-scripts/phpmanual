usort

(PHP 4, PHP 5)

usort â€” Sort an array by values using a user-defined comparison function

==============================================================================
*Description*

    bool usort ( array &$array , callable $value_compare_func )~

This function will sort an array by its values using a user-supplied
comparison function. If the array you wish to sort needs to be sorted by some
non-trivial criteria, you should use this function.

    Note:

    If two members compare as equal, their relative order in the sorted array
    is undefined.

    Note: This function assigns new keys to the elements in {array}. It will
    remove any existing keys that may have been assigned, rather than just
    reordering the keys.

==============================================================================
*Parameters*

{array}

    The input array.

{value_compare_func}

    The comparison function must return an integer less than, equal to, or
    greater than zero if the first argument is considered to be respectively
    less than, equal to, or greater than the second.


    int callback ( mixed $a, mixed $b )~
    Caution

    Returning non-integer values from the comparison function, such as float,
    will result in an internal cast to integer of the callback's return value.
    So values such as 0.99 and 0.1 will both be cast to an integer value of 0,
    which will compare such values as equal.

==============================================================================
*Return* *Values*

Returns TRUE on success or FALSE on failure.

==============================================================================
*Changelog*

Version                              Description
4.1.0   A new sort algorithm was introduced. The {value_compare_func} doesn't
        keep the original order for elements comparing as equal.

==============================================================================
*Examples*

Example #1 usort() example

<?php >
    function cmp($a, $b)
    {
        if ($a == $b) {
            return 0;
        }
        return ($a < $b) ? -1 : 1;
    }

    $a = array(3, 2, 5, 6, 1);

    usort($a, "cmp");

    foreach ($a as $key => $value) {
        echo "$key: $value\n";
    }
<?>

The above example will output:

0: 1
1: 2
2: 3
3: 5
4: 6

    Note:

    Obviously in this trivial case the |sort| function would be more
    appropriate.

Example #2 usort() example using multi-dimensional array

<?php >
    function cmp($a, $b)
    {
        return strcmp($a["fruit"], $b["fruit"]);
    }

    $fruits[0]["fruit"] = "lemons";
    $fruits[1]["fruit"] = "apples";
    $fruits[2]["fruit"] = "grapes";

    usort($fruits, "cmp");

    while (list($key, $value) = each($fruits)) {
        echo "\$fruits[$key]: " . $value["fruit"] . "\n";
    }
<?>

When sorting a multi-dimensional array, $a and $b contain references to the
first index of the array.

The above example will output:

$fruits[0]: apples
$fruits[1]: grapes
$fruits[2]: lemons

Example #3 usort() example using a member function of an object

<?php >
    class TestObj {
        var $name;

        function TestObj($name)
        {
            $this->name = $name;
        }

        /* This is the static comparing function: */
        static function cmp_obj($a, $b)
        {
            $al = strtolower($a->name);
            $bl = strtolower($b->name);
            if ($al == $bl) {
                return 0;
            }
            return ($al > $bl) ? +1 : -1;
        }
    }

    $a[] = new TestObj("c");
    $a[] = new TestObj("b");
    $a[] = new TestObj("d");

    usort($a, array("TestObj", "cmp_obj"));

    foreach ($a as $item) {
        echo $item->name . "\n";
    }
<?>

The above example will output:

b
c
d

Example #4 usort() example using a closure to sort a multi-dimensional array

<?php >
    $array[0] = array('key_a' => 'z', 'key_b' => 'c');
    $array[1] = array('key_a' => 'x', 'key_b' => 'b');
    $array[2] = array('key_a' => 'y', 'key_b' => 'a');

    function build_sorter($key) {
        return function ($a, $b) use ($key) {
            return strnatcmp($a[$key], $b[$key]);
        };
    }

    usort($array, build_sorter('key_b'));

    foreach ($array as $item) {
        echo $item['key_a'] . ', ' . $item['key_b'] . "\n";
    }
<?>

The above example will output:

y, a
x, b
z, c

==============================================================================
*See* *Also*

  * |uasort| - Sort an array with a user-defined comparison function and
    maintain index association
  * The comparison of array sorting functions


vim:ft=help: