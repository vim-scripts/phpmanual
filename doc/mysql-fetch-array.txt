mysql_fetch_array

(PHP 4, PHP 5)

mysql_fetch_array â€” Fetch a result row as an associative array, a numeric
array, or both

Warning

This extension is deprecated as of PHP 5.5.0, and will be removed in the
future. Instead, the MySQLi or PDO_MySQL extension should be used. See also
MySQL: choosing an API guide and related FAQ for more information.
Alternatives to this function include:

  * mysqli_fetch_array()
  * PDOStatement::fetch()

==============================================================================
*Description*

    array mysql_fetch_array ( resource $result [, int $result_type =~
    MYSQL_BOTH ] )~

Returns an array that corresponds to the fetched row and moves the internal
data pointer ahead.

==============================================================================
*Parameters*

{ result}

    The result resource that is being evaluated. This result comes from a call
    to |mysql_query|.

{result_type}

    The type of array that is to be fetched. It's a constant and can take the
    following values: MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.

==============================================================================
*Return* *Values*

Returns an array of strings that corresponds to the fetched row, or FALSE if
there are no more rows. The type of returned array depends on how
{result_type} is defined. By using MYSQL_BOTH (default), you'll get an array
with both associative and number indices. Using MYSQL_ASSOC, you only get
associative indices (as |mysql_fetch_assoc| works), using MYSQL_NUM, you only
get number indices (as |mysql_fetch_row| works).

If two or more columns of the result have the same field names, the last
column will take precedence. To access the other column(s) of the same name,
you must use the numeric index of the column or make an alias for the column.
For aliased columns, you cannot access the contents with the original column
name.

==============================================================================
*Examples*

Example #1 Query with aliased duplicate field names

SELECT table1.field AS foo, table2.field AS bar FROM table1, table2

Example #2 mysql_fetch_array() with MYSQL_NUM

<?php >
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Could not connect: " . mysql_error());
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_NUM)) {
        printf("ID: %s  Name: %s", $row[0], $row[1]);  
    }

    mysql_free_result($result);
<?>

Example #3 mysql_fetch_array() with MYSQL_ASSOC

<?php >
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Could not connect: " . mysql_error());
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {
        printf("ID: %s  Name: %s", $row["id"], $row["name"]);
    }

    mysql_free_result($result);
<?>

Example #4 mysql_fetch_array() with MYSQL_BOTH

<?php >
    mysql_connect("localhost", "mysql_user", "mysql_password") or
        die("Could not connect: " . mysql_error());
    mysql_select_db("mydb");

    $result = mysql_query("SELECT id, name FROM mytable");

    while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {
        printf ("ID: %s  Name: %s", $row[0], $row["name"]);
    }

    mysql_free_result($result);
<?>

==============================================================================
*Notes*

    Note: Performance

    An important thing to note is that using mysql_fetch_array() is not
    significantly slower than using |mysql_fetch_row|, while it provides a
    significant added value.

    Note: Field names returned by this function are case-sensitive.

    Note: This function sets NULL fields to the PHP NULL value.

==============================================================================
*See* *Also*

  * |mysql_fetch_row| - Get a result row as an enumerated array
  * |mysql_fetch_assoc| - Fetch a result row as an associative array
  * |mysql_data_seek| - Move internal result pointer
  * |mysql_query| - Send a MySQL query


vim:ft=help: