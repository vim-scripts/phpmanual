cubrid_get_db_parameter

(PECL CUBRID >= 8.3.0)

cubrid_get_db_parameter â€” Returns the CUBRID database parameters

==============================================================================
*Description*

    array cubrid_get_db_parameter ( resource $conn_identifier )~

This function returns the CUBRID database parameters or it returns FALSE on
failure. It returns an associative array with the values for the following
parameters:

  * PARAM_ISOLATION_LEVEL
  * PARAM_LOCK_TIMEOUT
  * PARAM_MAX_STRING_LENGTH
  * PARAM_AUTO_COMMIT

                             Database parameters
      Parameter                             Description
PARAM_ISOLATION_LEVEL The transaction isolation level.
                      CUBRID provides the lock timeout feature, which sets the
                      waiting time (in seconds) for the lock until the
LOCK_TIMEOUT          transaction lock setting is allowed. The default value
                      of the lock_timeout_in_secs parameter is -1, which means
                      the application client will wait indefinitely until the
                      transaction lock is allowed.
                      In CUBRID PHP, auto-commit mode is disabled by default
PARAM_AUTO_COMMIT     for transaction management. It can be set by using 
                      |cubrid_set_autocommit|.

The following table shows the isolation levels from 1 to 6. It consists of
table schema (row) and isolation level:

                   Levels of Isolation Supported by CUBRID
         Name                                Description
                       In this isolation level, problems concerning
SERIALIZABLE (6)       concurrency (e.g. dirty read, non-repeatable read,
                       phantom read, etc.) do not occur.
                       Another transaction T2 cannot update the schema of
REPEATABLE READ CLASS  table A while transaction T1 is viewing table A.
with REPEATABLE READ   Transaction T1 may experience phantom read for the
INSTANCES (5)          record R that was inserted by another transaction T2
                       when it is repeatedly retrieving a specific record.
                       Another transaction T2 cannot update the schema of
REPEATABLE READ CLASS  table A while transaction T1 is viewing table A.
with READ COMMITTED    Transaction T1 may experience R read (non-repeatable
INSTANCES (or CURSOR   read) that was updated and committed by another
STABILITY) (4)         transaction T2 when it is repeatedly retrieving the
                       record R.
                       Default isolation level. Another transaction T2 cannot
REPEATABLE READ CLASS  update the schema of table A while transaction T1 is
with READ UNCOMMITTED  viewing table A. Transaction T1 may experience R' read
INSTANCES (3)          (dirty read) for the record that was updated but not
                       committed by another transaction T2.
                       Transaction T1 may experience A' read (non-repeatable
                       read) for the table that was updated and committed by
READ COMMITTED CLASS   another transaction T2 while it is viewing table A
with READ COMMITTED    repeatedly. Transaction T1 may experience R' read
INSTANCES (2)          (non-repeatable read) for the record that was updated
                       and committed by another transaction T2 while it is
                       retrieving the record R repeatedly.
                       Transaction T1 may experience A' read (non-repeatable
READ COMMITTED CLASS   read) for the table that was updated and committed by
with READ UNCOMMITTED  another transaction T2 while it is repeatedly viewing
INSTANCES (1)          table A. Transaction T1 may experience R' read (dirty
                       read) for the record that was updated but not committed
                       by another transaction T2.

==============================================================================
*Parameters*

{conn_identifier}

    The CUBRID connection. If the connection identifier is not specified, the
    last link opened by |cubrid_connect| is assumed.

==============================================================================
*Return* *Values*

An associative array with CUBRID database parameters; on success.

FALSE on failure.

==============================================================================
*Changelog*

Version                              Description
8.4.0   Change LOCK_TIMEOUT to PARAM_LOCK_TIMEOUT, and MAX_STRING_LENGTH to
        PARAM_MAX_STRING_LENGTH in result.

==============================================================================
*Examples*

Example #1 cubrid_get_db_parameter() example

<?php >
    printf("%-30s %s\n", "CUBRID PHP Version:", cubrid_version());

    printf("\n");

    $conn = cubrid_connect("localhost", 33088, "demodb");

    if (!$conn) {
        die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());
    }

    $db_params = cubrid_get_db_parameter($conn);

    while (list($param_name, $param_value) = each($db_params)) {
        printf("%-30s %s\n", $param_name, $param_value);
    }

    printf("\n");

    $server_info = cubrid_get_server_info($conn);
    $client_info = cubrid_get_client_info();

    printf("%-30s %s\n", "Server Info:", $server_info);
    printf("%-30s %s\n", "Client Info:", $client_info);

    printf("\n");

    $charset = cubrid_get_charset($conn);

    printf("%-30s %s\n", "CUBRID Charset:", $charset);

    cubrid_disconnect($conn);

<?>

The above example will output:

CUBRID PHP Version:            9.1.0.0001

PARAM_ISOLATION_LEVEL          3
LOCK_TIMEOUT                   -1
MAX_STRING_LENGTH              1073741823
PARAM_AUTO_COMMIT              1

Server Info:                   9.1.0.0212
Client Info:                   9.1.0

CUBRID Charset:                iso8859-1

==============================================================================
*See* *Also*

  * |cubrid_set_db_parameter| - Sets the CUBRID database parameters
  * |cubrid_get_autocommit| - Get auto-commit mode of the connection


vim:ft=help: