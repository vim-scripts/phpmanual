socket_get_option

(PHP 4 >= 4.3.0, PHP 5)

socket_get_option â€” Gets socket options for the socket

==============================================================================
*Description*

    mixed socket_get_option ( resource $socket , int $level , int $optname )~

The socket_get_option() function retrieves the value for the option specified
by the {optname} parameter for the specified {socket}.

==============================================================================
*Parameters*

{socket}

    A valid socket resource created with |socket_create| or |socket_accept|.

{level}

    The {level} parameter specifies the protocol level at which the option
    resides. For example, to retrieve options at the socket level, a {level}
    parameter of SOL_SOCKET would be used. Other levels, such as TCP, can be
    used by specifying the protocol number of that level. Protocol numbers can
    be found by using the |getprotobyname| function.

{optname}

                           Available Socket Options
             Option                Description                 Type
                             Reports whether
    SO_DEBUG                 debugging information   int
                             is being recorded.
                             Reports whether
    SO_BROADCAST             transmission of         int
                             broadcast messages is
                             supported.
                             Reports whether local
    SO_REUSEADDR             addresses can be        int
                             reused.
                             Reports whether
                             connections are kept
                             active with periodic
                             transmission of
                             messages. If the
                             connected socket fails
    SO_KEEPALIVE             to respond to these     int
                             messages, the
                             connection is broken
                             and processes writing
                             to that socket are
                             notified with a SIGPIPE
                             signal.
                             Reports whether the
                             {socket} lingers on 
                             |socket_close| if data
                             is present. By default,
                             when the socket is
                             closed, it attempts to
                             send all unsent data.
                             In the case of a
                             connection-oriented
                             socket, |socket_close|
                             will wait for its peer
                             to acknowledge the
                             data.

                             If l_onoff is non-zero
                             and l_linger is zero,
                             all the unsent data     array. The array will
    SO_LINGER                will be discarded and   contain two keys: l_onoff
                             RST (reset) is sent to  and l_linger.
                             the peer in the case of
                             a connection-oriented
                             socket.

                             On the other hand, if
                             l_onoff is non-zero and
                             l_linger is non-zero, 
                             |socket_close| will
                             block until all the
                             data is sent or the
                             time specified in
                             l_linger elapses. If
                             the socket is
                             non-blocking, 
                             |socket_close| will fail
                             and return an error.

                             Reports whether the
    SO_OOBINLINE             {socket} leaves         int
                             out-of-band data
                             inline.
    SO_SNDBUF                Reports the size of the int
                             send buffer.
    SO_RCVBUF                Reports the size of the int
                             receive buffer.
                             Reports information     int (cannot be set by |
    SO_ERROR                 about error status and  socket_set_option|)
                             clears it.
                             Reports the {socket}    int (cannot be set by |
    SO_TYPE                  type (e.g. SOCK_STREAM  socket_set_option|)
                             ).
                             Reports whether
    SO_DONTROUTE             outgoing messages       int
                             bypass the standard
                             routing facilities.
                             Reports the minimum
    SO_RCVLOWAT              number of bytes to      int
                             process for {socket}
                             input operations.
                                                     array. The array will
                                                     contain two keys: sec
                             Reports the timeout     which is the seconds part
    SO_RCVTIMEO              value for input         on the timeout value and
                             operations.             usec which is the
                                                     microsecond part of the
                                                     timeout value.
                             Reports the timeout     array. The array will
                             value specifying the    contain two keys: sec
                             amount of time that an  which is the seconds part
    SO_SNDTIMEO              output function blocks  on the timeout value and
                             because flow control    usec which is the
                             prevents data from      microsecond part of the
                             being sent.             timeout value.
                             Reports the minimum
    SO_SNDLOWAT              number of bytes to      int
                             process for {socket}
                             output operations.
                             Reports whether the
    TCP_NODELAY              Nagle TCP algorithm is  int
                             disabled.
                                                     array with keys "group",
                                                     specifying a string with
                                                     an IPv4 or IPv6 multicast
                                                     address and "interface",
                                                     specifying either an
                             Joins a multicast       interface number (type 
    MCAST_JOIN_GROUP         group. (added in PHP    int) or a string with the
                             5.4)                    interface name, like
                                                     "eth0". 0 can be
                                                     specified to indicate the
                                                     interface should be
                                                     selected using routing
                                                     rules. (can only be used
                                                     in |socket_set_option|)
                                                     array. See
                             Leaves a multicast      MCAST_JOIN_GROUP for more
    MCAST_LEAVE_GROUP        group. (added in PHP    information. (can only be
                             5.4)                    used in 
                                                     |socket_set_option|)
                                                     array with the same keys
                             Blocks packets arriving as MCAST_JOIN_GROUP, plus
                             from a specific source  one extra key, source,
                             to a specific multicast which maps to a string
    MCAST_BLOCK_SOURCE       group, which must have  specifying an IPv4 or
                             been previously joined. IPv6 address of the
                             (added in PHP 5.4)      source to be blocked.
                                                     (can only be used in 
                                                     |socket_set_option|)
                             Unblocks (start
                             receiving again)        array with the same
                             packets arriving from a format as
    MCAST_UNBLOCK_SOURCE     specific source address MCAST_BLOCK_SOURCE. (can
                             to a specific multicast only be used in |
                             group, which must have  socket_set_option|)
                             been previously joined.
                             (added in PHP 5.4)
                             Receive packets         array with the same
                             destined to a specific  format as
    MCAST_JOIN_SOURCE_GROUP  multicast group whose   MCAST_BLOCK_SOURCE. (can
                             source address matches  only be used in |
                             a specific value.       socket_set_option|)
                             (added in PHP 5.4)
                             Stop receiving packets  array with the same
                             destined to a specific  format as
    MCAST_LEAVE_SOURCE_GROUP multicast group whose   MCAST_BLOCK_SOURCE. (can
                             soure address matches a only be used in |
                             specific value. (added  socket_set_option|)
                             in PHP 5.4)
                                                     Either int specifying the
                                                     interface number or a 
                                                     string with an interface
                                                     name, like eth0. The
                                                     value 0 can be used to
                                                     indicate the routing
                                                     table is to used in the
                             The outgoing interface  interface selection. The
    IP_MULTICAST_IF          for IPv4 multicast      function 
                             packets. (added in PHP  socket_get_option()
                             5.4)                    returns an interface
                                                     index. Note that, unlike
                                                     the C API, this option
                                                     does NOT take an IP
                                                     address. This eliminates
                                                     the interface difference
                                                     between IP_MULTICAST_IF
                                                     and IPV6_MULTICAST_IF.
                             The outgoing interface
    IPV6_MULTICAST_IF        for IPv6 multicast      The same as
                             packets. (added in PHP  IP_MULTICAST_IF.
                             5.4)
                             The multicast loopback
                             policy for IPv4
                             packets, which
                             determines whether
                             multicast packets sent  int (either 0 or 1). For 
                             by this socket also     |socket_set_option| any
    IP_MULTICAST_LOOP        reach receivers in the  value will be accepted
                             same host that have     and will be converted to
                             joined the same         a boolean following the
                             multicast group on the  usual PHP rules.
                             outgoing interface used
                             by this socket. This is
                             the case by default.
                             (added in PHP 5.4)
                             Analogous to
    IPV6_MULTICAST_LOOP      IP_MULTICAST_LOOP, but  int. See
                             for IPv6. (added in PHP IP_MULTICAST_LOOP.
                             5.4)
                             The time-to-live of
                             outgoing IPv4 multicast
                             packets. This should be
                             a value between 0
    IP_MULTICAST_TTL         (don't leave the        int between 0 and 255.
                             interface) and 255. The
                             default value is 1
                             (only the local network
                             is reached). (added in
                             PHP 5.4)
                             Analogous to
                             IP_MULTICAST_TTL, but
                             for IPv6 packets. The
    IPV6_MULTICAST_HOPS      value -1 is also        int between -1 and 255.
                             accepted, meaning the
                             route default should be
                             used. (added in PHP
                             5.4)

==============================================================================
*Return* *Values*

Returns the value of the given option, or FALSE on errors.

==============================================================================
*Examples*

Example #1 |socket_set_option| example

<?php >
    $socket = socket_create_listen(1223);

    $linger = array('l_linger' => 1, 'l_onoff' => 1);
    socket_set_option($socket, SOL_SOCKET, SO_LINGER, $linger);

    var_dump(socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR));
<?>


vim:ft=help: