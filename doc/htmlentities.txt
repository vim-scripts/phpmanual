htmlentities

(PHP 4, PHP 5)

htmlentities — Convert all applicable characters to HTML entities

==============================================================================
*Description*

    string htmlentities ( string $string [, int $flags = ENT_COMPAT |~
    ENT_HTML401 [, string $encoding = ini_get("default_charset") [,~
    bool $double_encode = true ]]] )~

This function is identical to |htmlspecialchars| in all ways, except with 
htmlentities(), all characters which have HTML character entity equivalents
are translated into these entities.

If you want to decode instead (the reverse) you can use |html_entity_decode|.

==============================================================================
*Parameters*

{string}

    The input string.

{flags}

    A bitmask of one or more of the following flags, which specify how to
    handle quotes, invalid code unit sequences and the used document type. The
    default is ENT_COMPAT | ENT_HTML401.

                         Available {flags} constants
    Constant Name                          Description
    ENT_COMPAT     Will convert double-quotes and leave single-quotes alone.
    ENT_QUOTES     Will convert both double and single quotes.
    ENT_NOQUOTES   Will leave both double and single quotes unconverted.
                   Silently discard invalid code unit sequences instead of
    ENT_IGNORE     returning an empty string. Using this flag is discouraged
                   as it » may have security implications.
                   Replace invalid code unit sequences with a Unicode
    ENT_SUBSTITUTE Replacement Character U+FFFD (UTF-8) or &#FFFD; (otherwise)
                   instead of returning an empty string.
                   Replace invalid code points for the given document type
                   with a Unicode Replacement Character U+FFFD (UTF-8) or &#
    ENT_DISALLOWED FFFD; (otherwise) instead of leaving them as is. This may
                   be useful, for instance, to ensure the well-formedness of
                   XML documents with embedded external content.
    ENT_HTML401    Handle code as HTML 4.01.
    ENT_XML1       Handle code as XML 1.
    ENT_XHTML      Handle code as XHTML.
    ENT_HTML5      Handle code as HTML 5.

{encoding}

    An optional argument defining the encoding used when converting
    characters.

    If omitted, the default value of the {encoding} varies depending on the
    PHP version in use. In PHP 5.6 and later, the default_charset
    configuration option is used as the default value. PHP 5.4 and 5.5 will
    use UTF-8 as the default. Earlier versions of PHP use ISO-8859-1.

    Although this argument is technically optional, you are highly encouraged
    to specify the correct value for your code if you are using PHP 5.5 or
    earlier, or if your default_charset configuration option may be set
    incorrectly for the given input.

    The following character sets are supported:

                              Supported charsets
      Charset      Aliases                      Description
    ISO-8859-1  ISO8859-1     Western European, Latin-1.
    ISO-8859-5  ISO8859-5     Little used cyrillic charset (Latin/Cyrillic).
                              Western European, Latin-9. Adds the Euro sign,
    ISO-8859-15 ISO8859-15    French and Finnish letters missing in Latin-1
                              (ISO-8859-1).
    UTF-8                     ASCII compatible multi-byte 8-bit Unicode.
    cp866       ibm866, 866   DOS-specific Cyrillic charset.
                Windows-1251,
    cp1251      win-1251,     Windows-specific Cyrillic charset.
                1251
    cp1252      Windows-1252, Windows specific charset for Western European.
                1252
    KOI8-R      koi8-ru,      Russian.
                koi8r
    BIG5        950           Traditional Chinese, mainly used in Taiwan.
    GB2312      936           Simplified Chinese, national standard character
                              set.
    BIG5-HKSCS                Big5 with Hong Kong extensions, Traditional
                              Chinese.
                SJIS,
    Shift_JIS   SJIS-win,     Japanese
                cp932, 932
    EUC-JP      EUCJP,        Japanese
                eucJP-win
    MacRoman                  Charset that was used by Mac OS.
                              An empty string activates detection from script
    ''                        encoding (Zend multibyte), default_charset and
                              current locale (see |nl_langinfo| and |setlocale
                              |), in this order. Not recommended.

        Note: Any other character sets are not recognized. The default
        encoding will be used instead and a warning will be emitted.

{double_encode}

    When {double_encode} is turned off PHP will not encode existing html
    entities. The default is to convert everything.

==============================================================================
*Return* *Values*

Returns the encoded string.

If the input {string} contains an invalid code unit sequence within the given
{encoding} an empty string will be returned, unless either the ENT_IGNORE or
ENT_SUBSTITUTE flags are set.

==============================================================================
*Changelog*

Version                              Description
5.6.0   The default value for the {encoding} parameter was changed to be the
        value of the default_charset configuration option.
5.4.0   The default value for the {encoding} parameter was changed to UTF-8.
5.4.0   The constants ENT_SUBSTITUTE, ENT_DISALLOWED, ENT_HTML401, ENT_XML1,
        ENT_XHTML and ENT_HTML5 were added.
5.3.0   The constant ENT_IGNORE was added.
5.2.3   The {double_encode} parameter was added.

==============================================================================
*Examples*

Example #1 A htmlentities() example

<?php >
    $str = "A 'quote' is <b>bold</b>";

    // Outputs: A 'quote' is &lt;b&gt;bold&lt;/b&gt;
    echo htmlentities($str);

    // Outputs: A &#039;quote&#039; is &lt;b&gt;bold&lt;/b&gt;
    echo htmlentities($str, ENT_QUOTES);
<?>

Example #2 Usage of ENT_IGNORE

<?php >
    $str = "\x8F!!!";

    // Outputs an empty string
    echo htmlentities($str, ENT_QUOTES, "UTF-8");

    // Outputs "!!!"
    echo htmlentities($str, ENT_QUOTES | ENT_IGNORE, "UTF-8");
<?>

==============================================================================
*See* *Also*

  * |html_entity_decode| - Convert all HTML entities to their applicable
    characters
  * |get_html_translation_table| - Returns the translation table used by
    htmlspecialchars and htmlentities
  * |htmlspecialchars| - Convert special characters to HTML entities
  * |nl2br| - Inserts HTML line breaks before all newlines in a string
  * |urlencode| - URL-encodes string


vim:ft=help: