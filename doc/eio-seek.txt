eio_seek

(PECL eio >= 0.5.0b)

eio_seek â€” Repositions the offset of the open file associated with the {fd}
argument to the argument {offset} according to the directive {whence}

==============================================================================
*Description*

    resource eio_seek ( mixed $fd , int $offset , int $whence [, int $pri =~
    EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )~

eio_seek() repositions the offset of the open file associated with stream,
Socket resource, or file descriptor specified by {fd} to the argument {offset}
according to the directive {whence} as follows:

  * EIO_SEEK_SET - Set position equal to {offset} bytes.
  * EIO_SEEK_CUR - Set position to current location plus {offset}.
  * EIO_SEEK_END - Set position to end-of-file plus {offset}.

==============================================================================
*Parameters*

{fd}

    Stream, Socket resource, or numeric file descriptor

{offset}

    Starting point from which data is to be read.

{length}

    Number of bytes to be read.

{pri}

    The request priority: EIO_PRI_DEFAULT, EIO_PRI_MIN, EIO_PRI_MAX, or NULL.
    If NULL passed, {pri} internally is set to EIO_PRI_DEFAULT.

{callback}

    {callback} function is called when the request is done. It should match
    the following prototype:
    void callback(mixed $data, int $result[, resource $req]);

    {data}

        is custom data passed to the request.

    {result}

        request-specific result value; basically, the value returned by
        corresponding system call.

    {req}

        is optional request resource which can be used with functions like 
        |eio_get_last_error|

{data}

    Arbitrary variable passed to {callback}.

==============================================================================
*Return* *Values*

eio_seek() returns request resource on success or FALSE on error.


vim:ft=help: