var_export

(PHP 4 >= 4.2.0, PHP 5)

var_export â€” Outputs or returns a parsable string representation of a variable

==============================================================================
*Description*

    mixed var_export ( mixed $expression [, bool $return = false ] )~

var_export() gets structured information about the given variable. It is
similar to |var_dump| with one exception: the returned representation is valid
PHP code.

==============================================================================
*Parameters*

{expression}

    The variable you want to export.

{return}

    If used and set to TRUE, var_export() will return the variable
    representation instead of outputting it.

==============================================================================
*Return* *Values*

Returns the variable representation when the {return} parameter is used and
evaluates to TRUE. Otherwise, this function will return NULL.

==============================================================================
*Notes*

    Note:

    When the {return} parameter is used, this function uses internal output
    buffering so it cannot be used inside an |ob_start| callback function.

==============================================================================
*Changelog*

Version                              Description
5.1.0   Possibility to export classes and arrays containing classes using the
        __set_state() magic method.

==============================================================================
*Examples*

Example #1 var_export() Examples

<?php >
    $a = array (1, 2, array ("a", "b", "c"));
    var_export($a);
<?>

The above example will output:

array (
  0 => 1,
  1 => 2,
  2 =>
  array (
    0 => 'a',
    1 => 'b',
    2 => 'c',
  ),
)

<?php >

    $b = 3.1;
    $v = var_export($b, true);
    echo $v;

<?>

The above example will output:

3.1

Example #2 Exporting classes since PHP 5.1.0

<?php >
    class A { public $var; }
    $a = new A;
    $a->var = 5;
    var_export($a);
<?>

The above example will output:

A::__set_state(array(
   'var' => 5,
))

Example #3 Using __set_state() (since PHP 5.1.0)

<?php >
    class A
    {
        public $var1;
        public $var2;

        public static function __set_state($an_array)
        {
            $obj = new A;
            $obj->var1 = $an_array['var1'];
            $obj->var2 = $an_array['var2'];
            return $obj;
        }
    }

    $a = new A;
    $a->var1 = 5;
    $a->var2 = 'foo';

    eval('$b = ' . var_export($a, true) . ';'); // $b = A::__set_state(array(
                                                //    'var1' => 5,
                                                //    'var2' => 'foo',
                                                // ));
    var_dump($b);
<?>

The above example will output:

object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}

==============================================================================
*Notes*

    Note:

    Variables of type resource couldn't be exported by this function.

    Note:

    var_export() does not handle circular references as it would be close to
    impossible to generate parsable PHP code for that. If you want to do
    something with the full representation of an array or object, use 
    |serialize|.

Warning

When var_export() exports objects, the leading slash is not included in the
class name of namespaced classes for maximum compatibility.

==============================================================================
*See* *Also*

  * |print_r| - Prints human-readable information about a variable
  * |serialize| - Generates a storable representation of a value
  * |var_dump| - Dumps information about a variable


vim:ft=help: