array_walk

(PHP 4, PHP 5)

array_walk â€” Apply a user supplied function to every member of an array

==============================================================================
*Description*

    bool array_walk ( array &$array , callable $callback [, mixed $userdata =~
    NULL ] )~

Applies the user-defined {callback} function to each element of the {array}
array.

array_walk() is not affected by the internal array pointer of {array}. 
array_walk() will walk through the entire array regardless of pointer
position.

==============================================================================
*Parameters*

{array}

    The input array.

{callback}

    Typically, {callback} takes on two parameters. The {array} parameter's
    value being the first, and the key/index second.

        Note:

        If {callback} needs to be working with the actual values of the array,
        specify the first parameter of {callback} as a reference. Then, any
        changes made to those elements will be made in the original array
        itself.

        Note:

        Many internal functions (for example |strtolower|) will throw a
        warning if more than the expected number of argument are passed in and
        are not usable directly as a {callback}.

    Only the values of the {array} may potentially be changed; its structure
    cannot be altered, i.e., the programmer cannot add, unset or reorder
    elements. If the callback does not respect this requirement, the behavior
    of this function is undefined, and unpredictable.

{userdata}

    If the optional {userdata} parameter is supplied, it will be passed as the
    third parameter to the {callback}.

==============================================================================
*Return* *Values*

Returns TRUE on success or FALSE on failure.

==============================================================================
*Errors/Exceptions*

If function {callback} requires more parameters than given to it, an error of
level E_WARNING will be generated each time array_walk() calls {callback}.

==============================================================================
*Examples*

Example #1 array_walk() example

<?php >
    $fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => 
    "apple");

    function test_alter(&$item1, $key, $prefix)
    {
        $item1 = "$prefix: $item1";
    }

    function test_print($item2, $key)
    {
        echo "$key. $item2<br />\n";
    }

    echo "Before ...:\n";
    array_walk($fruits, 'test_print');

    array_walk($fruits, 'test_alter', 'fruit');
    echo "... and after:\n";

    array_walk($fruits, 'test_print');
<?>

The above example will output:

Before ...:
d. lemon
a. orange
b. banana
c. apple
... and after:
d. fruit: lemon
a. fruit: orange
b. fruit: banana
c. fruit: apple

==============================================================================
*See* *Also*

  * |array_walk_recursive| - Apply a user function recursively to every member
    of an array
  * |iterator_apply| - Call a function for every element in an iterator
  * |list| - Assign variables as if they were an array
  * |each| - Return the current key and value pair from an array and advance
    the array cursor
  * |call_user_func_array| - Call a callback with an array of parameters
  * |array_map| - Applies the callback to the elements of the given arrays
  * information about the callback type
  * foreach


vim:ft=help: