strpos

(PHP 4, PHP 5)

strpos â€” Find the position of the first occurrence of a substring in a string

==============================================================================
*Description*

    mixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )~

Find the numeric position of the first occurrence of {needle} in the
{haystack} string.

==============================================================================
*Parameters*

{haystack}

    The string to search in.

{needle}

    If {needle} is not a string, it is converted to an integer and applied as
    the ordinal value of a character.

{offset}

    If specified, search will start this number of characters counted from the
    beginning of the string. Unlike |strrpos| and |strripos|, the offset
    cannot be negative.

==============================================================================
*Return* *Values*

Returns the position of where the needle exists relative to the beginning of
the {haystack} string (independent of offset). Also note that string positions
start at 0, and not 1.

Returns FALSE if the needle was not found.

Warning

This function may return Boolean FALSE, but may also return a non-Boolean
value which evaluates to FALSE. Please read the section on Booleans for more
information. Use the === operator for testing the return value of this
function.

==============================================================================
*Examples*

Example #1 Using ===

<?php >
    $mystring = 'abc';
    $findme   = 'a';
    $pos = strpos($mystring, $findme);

    // Note our use of ===.  Simply == would not work as expected
    // because the position of 'a' was the 0th (first) character.
    if ($pos === false) {
        echo "The string '$findme' was not found in the string '$mystring'";
    } else {
        echo "The string '$findme' was found in the string '$mystring'";
        echo " and exists at position $pos";
    }
<?>

Example #2 Using !==

<?php >
    $mystring = 'abc';
    $findme   = 'a';
    $pos = strpos($mystring, $findme);

    // The !== operator can also be used.  Using != would not work as expected
    // because the position of 'a' is 0. The statement (0 != false) evaluates 
    // to false.
    if ($pos !== false) {
         echo "The string '$findme' was found in the string '$mystring'";
             echo " and exists at position $pos";
    } else {
         echo "The string '$findme' was not found in the string '$mystring'";
    }
<?>

Example #3 Using an offset

<?php >
    // We can search for the character, ignoring anything before the offset
    $newstring = 'abcdef abcdef';
    $pos = strpos($newstring, 'a', 1); // $pos = 7, not 0
<?>

==============================================================================
*Notes*

    Note: This function is binary-safe.

==============================================================================
*See* *Also*

  * |stripos| - Find the position of the first occurrence of a
    case-insensitive substring in a string
  * |strrpos| - Find the position of the last occurrence of a substring in a
    string
  * |strripos| - Find the position of the last occurrence of a
    case-insensitive substring in a string
  * |strstr| - Find the first occurrence of a string
  * |strpbrk| - Search a string for any of a set of characters
  * |substr| - Return part of a string
  * |preg_match| - Perform a regular expression match


vim:ft=help: