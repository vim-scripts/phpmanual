fread

(PHP 4, PHP 5)

fread â€” Binary-safe file read

==============================================================================
*Description*

    string fread ( resource $handle , int $length )~

fread() reads up to {length} bytes from the file pointer referenced by
{handle}. Reading stops as soon as one of the following conditions is met:

  * {length} bytes have been read
  * EOF (end of file) is reached
  * a packet becomes available or the | socket timeout| occurs (for network
    streams)
  * if the stream is read buffered and it does not represent a plain file, at
    most one read of up to a number of bytes equal to the chunk size (usually
    8192) is made; depending on the previously buffered data, the size of the
    returned data may be larger than the chunk size.

==============================================================================
*Parameters*

{handle}

    A file system pointer resource that is typically created using |fopen|.

{length}

    Up to {length} number of bytes read.

==============================================================================
*Return* *Values*

Returns the read string or FALSE on failure.

==============================================================================
*Examples*

Example #1 A simple fread() example

<?php >
    // get contents of a file into a string
    $filename = "/usr/local/something.txt";
    $handle = fopen($filename, "r");
    $contents = fread($handle, filesize($filename));
    fclose($handle);
<?>

Example #2 Binary fread() example

Warning

On systems which differentiate between binary and text files (i.e. Windows)
the file must be opened with 'b' included in |fopen| mode parameter.

<?php >
    $filename = "c:\\files\\somepic.gif";
    $handle = fopen($filename, "rb");
    $contents = fread($handle, filesize($filename));
    fclose($handle);
<?>

Example #3 Remote fread() examples

Warning

When reading from anything that is not a regular local file, such as streams
returned when reading remote files or from |popen| and |fsockopen|, reading
will stop after a packet is available. This means that you should collect the
data together in chunks as shown in the examples below.

<?php >
    // For PHP 5 and up
    $handle = fopen("http://www.example.com/", "rb");
    $contents = stream_get_contents($handle);
    fclose($handle);
<?>
<?php >
    $handle = fopen("http://www.example.com/", "rb");
    $contents = '';
    while (!feof($handle)) {
      $contents .= fread($handle, 8192);
    }
    fclose($handle);
<?>

==============================================================================
*Notes*

    Note:

    If you just want to get the contents of a file into a string, use 
    |file_get_contents| as it has much better performance than the code above.

    Note:

    Note that fread() reads from the current position of the file pointer. Use
    |ftell| to find the current position of the pointer and |rewind| to rewind
    the pointer position.

==============================================================================
*See* *Also*

  * |fwrite| - Binary-safe file write
  * |fopen| - Opens file or URL
  * |fsockopen| - Open Internet or Unix domain socket connection
  * |popen| - Opens process file pointer
  * |fgets| - Gets line from file pointer
  * |fgetss| - Gets line from file pointer and strip HTML tags
  * |fscanf| - Parses input from a file according to a format
  * |file| - Reads entire file into an array
  * |fpassthru| - Output all remaining data on a file pointer
  * |ftell| - Returns the current position of the file read/write pointer
  * |rewind| - Rewind the position of a file pointer


vim:ft=help: