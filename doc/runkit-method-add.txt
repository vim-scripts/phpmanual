runkit_method_add

(PECL runkit >= 0.7.0)

runkit_method_add â€” Dynamically adds a new method to a given class

==============================================================================
*Description*

    bool runkit_method_add ( string $classname , string $methodname , string~
    $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )~
Warning

This function is EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of
PHP. This function should be used at your own risk.

==============================================================================
*Parameters*

{classname}

    The class to which this method will be added

{methodname}

    The name of the method to add

{args}

    Comma-delimited list of arguments for the newly-created method

{code}

    The code to be evaluated when {methodname} is called

{flags}

    The type of method to create, can be RUNKIT_ACC_PUBLIC,
    RUNKIT_ACC_PROTECTED or RUNKIT_ACC_PRIVATE

        Note:

        This parameter is only used as of PHP 5, because, prior to this, all
        methods were public.

==============================================================================
*Return* *Values*

Returns TRUE on success or FALSE on failure.

==============================================================================
*Examples*

Example #1 runkit_method_add() example

<?php >
    class Example {
        function foo() {
            echo "foo!\n";
        }
    }

    // create an Example object
    $e = new Example();

    // Add a new public method
    runkit_method_add(
        'Example',
        'add',
        '$num1, $num2',
        'return $num1 + $num2;',
        RUNKIT_ACC_PUBLIC
    );

    // add 12 + 4
    echo $e->add(12, 4);
<?>

The above example will output:

16

==============================================================================
*See* *Also*

  * |runkit_method_copy| - Copies a method from class to another
  * |runkit_method_redefine| - Dynamically changes the code of the given
    method
  * |runkit_method_remove| - Dynamically removes the given method
  * |runkit_method_rename| - Dynamically changes the name of the given method
  * |runkit_function_add| - Add a new function, similar to create_function


vim:ft=help: