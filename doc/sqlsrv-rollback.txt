sqlsrv_rollback

(No version information available, might only be in Git)

sqlsrv_rollback â€” Rolls back a transaction that was begun with 
|sqlsrv_begin_transaction|

==============================================================================
*Description*

    bool sqlsrv_rollback ( resource $conn )~

Rolls back a transaction that was begun with |sqlsrv_begin_transaction| and
returns the connection to auto-commit mode.

==============================================================================
*Parameters*

{conn}

    The connection resource returned by a call to |sqlsrv_connect|.

==============================================================================
*Return* *Values*

Returns TRUE on success or FALSE on failure.

==============================================================================
*Examples*

Example #1 sqlsrv_rollback() example

The following example demonstrates how to use |sqlsrv_begin_transaction|
together with |sqlsrv_commit| and sqlsrv_rollback().

<?php >
    $serverName = "serverName\sqlexpress";
    $connectionInfo = array( "Database"=>"dbName", "UID"=>"userName", "PWD"=>
    "password");
    $conn = sqlsrv_connect( $serverName, $connectionInfo);
    if( $conn === false ) {
        die( print_r( sqlsrv_errors(), true ));
    }

    /* Begin the transaction. */
    if ( sqlsrv_begin_transaction( $conn ) === false ) {
         die( print_r( sqlsrv_errors(), true ));
    }

    /* Initialize parameter values. */
    $orderId = 1; $qty = 10; $productId = 100;

    /* Set up and execute the first query. */
    $sql1 = "INSERT INTO OrdersTable (ID, Quantity, ProductID)
             VALUES (?, ?, ?)";
    $params1 = array( $orderId, $qty, $productId );
    $stmt1 = sqlsrv_query( $conn, $sql1, $params1 );

    /* Set up and execute the second query. */
    $sql2 = "UPDATE InventoryTable 
             SET Quantity = (Quantity - ?) 
             WHERE ProductID = ?";
    $params2 = array($qty, $productId);
    $stmt2 = sqlsrv_query( $conn, $sql2, $params2 );

    /* If both queries were successful, commit the transaction. */
    /* Otherwise, rollback the transaction. */
    if( $stmt1 && $stmt2 ) {
         sqlsrv_commit( $conn );
         echo "Transaction committed.<br />";
    } else {
         sqlsrv_rollback( $conn );
         echo "Transaction rolled back.<br />";
    }
<?>

==============================================================================
*See* *Also*

  * |sqlsrv_begin_transaction| - Begins a database transaction
  * |sqlsrv_commit| - Commits a transaction that was begun with
    sqlsrv_begin_transaction


vim:ft=help: