mysql_list_fields

(PHP 4, PHP 5)

mysql_list_fields â€” List MySQL table fields

Warning

This extension is deprecated as of PHP 5.5.0, and will be removed in the
future. Instead, the MySQLi or PDO_MySQL extension should be used. See also
MySQL: choosing an API guide and related FAQ for more information.
Alternatives to this function include:

  * SQL Query: SHOW COLUMNS FROM sometable

==============================================================================
*Description*

    resource mysql_list_fields ( string $database_name , string $table_name~
    [, resource $link_identifier = NULL ] )~

Retrieves information about the given table name.

This function is deprecated. It is preferable to use |mysql_query| to issue an
SQL SHOW COLUMNS FROM table [LIKE 'name'] statement instead.

==============================================================================
*Parameters*

{database_name}

    The name of the database that's being queried.

{table_name}

    The name of the table that's being queried.

{ link_identifier}

    The MySQL connection. If the link identifier is not specified, the last
    link opened by |mysql_connect| is assumed. If no such link is found, it
    will try to create one as if |mysql_connect| was called with no arguments.
    If no connection is found or established, an E_WARNING level error is
    generated.

==============================================================================
*Return* *Values*

A result pointer resource on success, or FALSE on failure.

The returned result can be used with |mysql_field_flags|, |mysql_field_len|, 
|mysql_field_name| and |mysql_field_type|.

==============================================================================
*Examples*

Example #1 Alternate to deprecated mysql_list_fields()

<?php >
    $result = mysql_query("SHOW COLUMNS FROM sometable");
    if (!$result) {
        echo 'Could not run query: ' . mysql_error();
        exit;
    }
    if (mysql_num_rows($result) > 0) {
        while ($row = mysql_fetch_assoc($result)) {
            print_r($row);
        }
    }
<?>

The above example will output something similar to:

Array
(
    [Field] => id
    [Type] => int(7)
    [Null] =>
    [Key] => PRI
    [Default] =>
    [Extra] => auto_increment
)
Array
(
    [Field] => email
    [Type] => varchar(100)
    [Null] =>
    [Key] =>
    [Default] =>
    [Extra] =>
)

==============================================================================
*Notes*

    Note:

    For backward compatibility, the following deprecated alias may be used: 
    mysql_listfields()

==============================================================================
*See* *Also*

  * |mysql_field_flags| - Get the flags associated with the specified field in
    a result
  * |mysql_info| - Get information about the most recent query


vim:ft=help: